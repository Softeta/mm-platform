// <auto-generated />
using System;
using Jobs.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Jobs.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(JobContext))]
    [Migration("20220913142450_RemoveShortlistSendDateFromSelectedCandidate")]
    partial class RemoveShortlistSendDateFromSelectedCandidate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobAssignedEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("AssignedEmployees", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId", "IndustryId")
                        .IsUnique();

                    b.ToTable("JobIndustries", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobInterestedCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Position")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId", "CandidateId")
                        .IsUnique();

                    b.ToTable("JobInterestedCandidates", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobInterestedLinkedIn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId", "Url")
                        .IsUnique();

                    b.ToTable("JobInterestedLinkedIns", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobLanguages", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSeniority", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Seniority")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobSeniorities", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobId", "SkillId")
                        .IsUnique();

                    b.ToTable("JobSkills", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeadlineDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Jobs", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.Entities.JobArchivedCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brief")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("InvitedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PictureUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SystemLanguage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("ArchivedCandidate", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.Entities.JobSelectedCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brief")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("InvitedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsHiredInOtherJob")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShortListedInOtherJob")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PictureUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SystemLanguage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("SelectedCandidate", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.JobCandidates", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeadlineDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Freelance")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Permanent")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("ShortListSendDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("JobCandidates", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobAssignedEmployee", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Employee", "Employee", b1 =>
                        {
                            b1.Property<Guid>("JobAssignedEmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("PictureUri")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.HasKey("JobAssignedEmployeeId");

                            b1.ToTable("AssignedEmployees", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobAssignedEmployeeId");
                        });

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobIndustry", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Industries")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobInterestedCandidate", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("InterestedCandidates")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobInterestedLinkedIn", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("InterestedLinkedIns")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobLanguage", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Languages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Language", "Language", b1 =>
                        {
                            b1.Property<Guid>("JobLanguageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.HasKey("JobLanguageId");

                            b1.ToTable("JobLanguages", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobLanguageId");
                        });

                    b.Navigation("Language")
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSeniority", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("SeniorityLevels")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSkill", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Skills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b1 =>
                        {
                            b1.Property<Guid>("JobSkillId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobSkillId");

                            b1.ToTable("JobSkills", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobSkillId");
                        });

                    b.Navigation("AliasTo");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Employee", "Owner", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("PictureUri")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b2 =>
                                {
                                    b2.Property<Guid>("PositionJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("PositionJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("PositionJobId");
                                });

                            b1.Navigation("AliasTo");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LogoUri")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("CompanyJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("AddressLine")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<string>("City")
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<string>("Country")
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<string>("PostalCode")
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.HasKey("CompanyJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("CompanyJobId");

                                    b2.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Coordinates", "Coordinates", b3 =>
                                        {
                                            b3.Property<Guid>("AddressCompanyJobId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Latitude")
                                                .HasColumnType("float");

                                            b3.Property<double>("Longitude")
                                                .HasColumnType("float");

                                            b3.Property<Point>("Point")
                                                .IsRequired()
                                                .HasColumnType("geography");

                                            b3.HasKey("AddressCompanyJobId");

                                            b3.ToTable("Jobs", "jobs");

                                            b3.WithOwner()
                                                .HasForeignKey("AddressCompanyJobId");
                                        });

                                    b2.Navigation("Coordinates");
                                });

                            b1.OwnsMany("Jobs.Domain.Aggregates.JobAggregate.Entities.JobContactPerson", "ContactPersons", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTimeOffset>("CreatedAt")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<bool>("IsMainContact")
                                        .HasColumnType("bit");

                                    b2.Property<Guid>("JobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<Guid>("PersonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("PhoneNumber")
                                        .HasMaxLength(32)
                                        .HasColumnType("nvarchar(32)");

                                    b2.Property<string>("PictureUri")
                                        .HasMaxLength(2000)
                                        .HasColumnType("nvarchar(2000)");

                                    b2.Property<string>("SystemLanguage")
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("JobId");

                                    b2.ToTable("JobContactPersons", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("JobId");

                                    b2.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Position", "Position", b3 =>
                                        {
                                            b3.Property<Guid>("JobContactPersonId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("Code")
                                                .IsRequired()
                                                .HasMaxLength(256)
                                                .HasColumnType("nvarchar(256)");

                                            b3.Property<Guid>("Id")
                                                .HasColumnType("uniqueidentifier");

                                            b3.HasKey("JobContactPersonId");

                                            b3.ToTable("JobContactPersons", "jobs");

                                            b3.WithOwner()
                                                .HasForeignKey("JobContactPersonId");

                                            b3.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b4 =>
                                                {
                                                    b4.Property<Guid>("PositionJobContactPersonId")
                                                        .HasColumnType("uniqueidentifier");

                                                    b4.Property<string>("Code")
                                                        .IsRequired()
                                                        .HasMaxLength(256)
                                                        .HasColumnType("nvarchar(256)");

                                                    b4.Property<Guid>("Id")
                                                        .HasColumnType("uniqueidentifier");

                                                    b4.HasKey("PositionJobContactPersonId");

                                                    b4.ToTable("JobContactPersons", "jobs");

                                                    b4.WithOwner()
                                                        .HasForeignKey("PositionJobContactPersonId");
                                                });

                                            b3.Navigation("AliasTo");
                                        });

                                    b2.Navigation("Position");
                                });

                            b1.Navigation("Address");

                            b1.Navigation("ContactPersons");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Sharing", "Sharing", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("Key")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Terms", "Terms", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<bool>("IsUrgent")
                                .HasColumnType("bit");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.OwnsOne("Domain.Seedwork.Shared.ValueObjects.DateRange", "Availability", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTimeOffset>("From")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<DateTimeOffset?>("To")
                                        .HasColumnType("datetimeoffset");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Freelance", "Freelance", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int?>("HoursPerProject")
                                        .HasColumnType("int");

                                    b2.Property<string>("WorkType")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");

                                    b2.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.SalaryBudget", "HourlyBudget", b3 =>
                                        {
                                            b3.Property<Guid>("FreelanceTermsJobId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<decimal?>("From")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.Property<decimal?>("To")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.HasKey("FreelanceTermsJobId");

                                            b3.ToTable("Jobs", "jobs");

                                            b3.WithOwner()
                                                .HasForeignKey("FreelanceTermsJobId");
                                        });

                                    b2.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.SalaryBudget", "MonthlyBudget", b3 =>
                                        {
                                            b3.Property<Guid>("FreelanceTermsJobId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<decimal?>("From")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.Property<decimal?>("To")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.HasKey("FreelanceTermsJobId");

                                            b3.ToTable("Jobs", "jobs");

                                            b3.WithOwner()
                                                .HasForeignKey("FreelanceTermsJobId");
                                        });

                                    b2.Navigation("HourlyBudget");

                                    b2.Navigation("MonthlyBudget");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.FullTimeWorkingHours", "FullTimeWorkingHours", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.JobFormats", "Formats", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("IsHybrid")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("IsOnSite")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("IsRemote")
                                        .HasColumnType("bit");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.PartTimeWorkingHours", "PartTimeWorkingHours", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<int?>("Weekly")
                                        .HasColumnType("int");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Permanent", "Permanent", b2 =>
                                {
                                    b2.Property<Guid>("TermsJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("WorkType")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.HasKey("TermsJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("TermsJobId");

                                    b2.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.SalaryBudget", "MonthlyBudget", b3 =>
                                        {
                                            b3.Property<Guid>("PermanentTermsJobId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<decimal?>("From")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.Property<decimal?>("To")
                                                .HasColumnType("Decimal(18,2)");

                                            b3.HasKey("PermanentTermsJobId");

                                            b3.ToTable("Jobs", "jobs");

                                            b3.WithOwner()
                                                .HasForeignKey("PermanentTermsJobId");
                                        });

                                    b2.Navigation("MonthlyBudget");
                                });

                            b1.Navigation("Availability");

                            b1.Navigation("Formats")
                                .IsRequired();

                            b1.Navigation("Freelance");

                            b1.Navigation("FullTimeWorkingHours");

                            b1.Navigation("PartTimeWorkingHours");

                            b1.Navigation("Permanent");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.YearExperience", "YearExperience", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("From")
                                .HasColumnType("int");

                            b1.Property<int?>("To")
                                .HasColumnType("int");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Sharing");

                    b.Navigation("Terms")
                        .IsRequired();

                    b.Navigation("YearExperience");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.Entities.JobArchivedCandidate", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobCandidatesAggregate.JobCandidates", null)
                        .WithMany("ArchivedCandidates")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("JobArchivedCandidateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobArchivedCandidateId");

                            b1.ToTable("ArchivedCandidate", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobArchivedCandidateId");

                            b1.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b2 =>
                                {
                                    b2.Property<Guid>("PositionJobArchivedCandidateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("PositionJobArchivedCandidateId");

                                    b2.ToTable("ArchivedCandidate", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("PositionJobArchivedCandidateId");
                                });

                            b1.Navigation("AliasTo");
                        });

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.Entities.JobSelectedCandidate", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobCandidatesAggregate.JobCandidates", null)
                        .WithMany("SelectedCandidates")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("JobSelectedCandidateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobSelectedCandidateId");

                            b1.ToTable("SelectedCandidate", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobSelectedCandidateId");

                            b1.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b2 =>
                                {
                                    b2.Property<Guid>("PositionJobSelectedCandidateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("PositionJobSelectedCandidateId");

                                    b2.ToTable("SelectedCandidate", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("PositionJobSelectedCandidateId");
                                });

                            b1.Navigation("AliasTo");
                        });

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.JobCandidates", b =>
                {
                    b.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("JobCandidatesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("JobCandidatesId");

                            b1.ToTable("JobCandidates", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobCandidatesId");

                            b1.OwnsOne("Domain.Seedwork.Shared.ValueObjects.Tag", "AliasTo", b2 =>
                                {
                                    b2.Property<Guid>("PositionJobCandidatesId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("PositionJobCandidatesId");

                                    b2.ToTable("JobCandidates", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("PositionJobCandidatesId");
                                });

                            b1.Navigation("AliasTo");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobCandidatesAggregate.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("JobCandidatesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LogoUri")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("JobCandidatesId");

                            b1.ToTable("JobCandidates", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobCandidatesId");
                        });

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.Navigation("AssignedEmployees");

                    b.Navigation("Industries");

                    b.Navigation("InterestedCandidates");

                    b.Navigation("InterestedLinkedIns");

                    b.Navigation("Languages");

                    b.Navigation("SeniorityLevels");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobCandidatesAggregate.JobCandidates", b =>
                {
                    b.Navigation("ArchivedCandidates");

                    b.Navigation("SelectedCandidates");
                });
#pragma warning restore 612, 618
        }
    }
}
