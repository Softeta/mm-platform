// <auto-generated />
using System;
using Jobs.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jobs.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(JobContext))]
    [Migration("20220324143232_ImagePathsToUri")]
    partial class ImagePathsToUri
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobAssignedEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("AssignedEmployees", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormatType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobFormats", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobLanguages", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobRegions", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSeniority", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Seniority")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobSeniorities", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobSkills", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobWorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobWorkTypes", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeadlineDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsApprovalNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Jobs", "jobs");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobAssignedEmployee", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Employee", "Employee", b1 =>
                        {
                            b1.Property<Guid>("JobAssignedEmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("JobAssignedEmployeeId");

                            b1.ToTable("AssignedEmployees", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobAssignedEmployeeId");
                        });

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobFormat", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Formats")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobLanguage", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Languages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobRegion", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Regions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSeniority", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("SeniorityLevels")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobSkill", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("Skills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Entities.JobWorkType", b =>
                {
                    b.HasOne("Jobs.Domain.Aggregates.JobAggregate.Job", null)
                        .WithMany("WorkTypes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Employee", "Owner", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.Company", "Company", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AddressLine")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Description")
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LogoUri")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.OwnsMany("Jobs.Domain.Aggregates.JobAggregate.Entities.JobContactPerson", "ContactPersons", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTimeOffset>("CreatedAt")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<Guid>("JobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)");

                                    b2.Property<string>("PhoneNumber")
                                        .HasMaxLength(32)
                                        .HasColumnType("nvarchar(32)");

                                    b2.Property<string>("PictureUri")
                                        .HasMaxLength(200)
                                        .HasColumnType("nvarchar(200)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("JobId");

                                    b2.ToTable("JobContactPersons", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("JobId");
                                });

                            b1.Navigation("ContactPersons");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.FeeRange", "FeeRange", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.AmountRange", "PerHour", b2 =>
                                {
                                    b2.Property<Guid>("FeeRangeJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("From")
                                        .HasColumnType("Decimal(18,2)");

                                    b2.Property<decimal>("To")
                                        .HasColumnType("Decimal(18,2)");

                                    b2.HasKey("FeeRangeJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("FeeRangeJobId");
                                });

                            b1.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.AmountRange", "PerMonth", b2 =>
                                {
                                    b2.Property<Guid>("FeeRangeJobId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("From")
                                        .HasColumnType("Decimal(18,2)");

                                    b2.Property<decimal>("To")
                                        .HasColumnType("Decimal(18,2)");

                                    b2.HasKey("FeeRangeJobId");

                                    b2.ToTable("Jobs", "jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("FeeRangeJobId");
                                });

                            b1.Navigation("PerHour");

                            b1.Navigation("PerMonth");
                        });

                    b.OwnsOne("Jobs.Domain.Aggregates.JobAggregate.ValueObjects.YearExperience", "YearExperience", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("From")
                                .HasColumnType("int");

                            b1.Property<int?>("To")
                                .HasColumnType("int");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("FeeRange");

                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("YearExperience");
                });

            modelBuilder.Entity("Jobs.Domain.Aggregates.JobAggregate.Job", b =>
                {
                    b.Navigation("AssignedEmployees");

                    b.Navigation("Formats");

                    b.Navigation("Languages");

                    b.Navigation("Regions");

                    b.Navigation("SeniorityLevels");

                    b.Navigation("Skills");

                    b.Navigation("WorkTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
